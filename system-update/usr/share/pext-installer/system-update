#! /bin/python3

import gi
import time
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk as gtk
import os
import subprocess
import configparser

class Main:

    def uwu():
        os.system("sleep 7")

    def __init__(self):
        gladeFile = "/usr/share/pext-installer/system-update.glade"
        self.builder = gtk.Builder()
        self.builder.add_from_file(gladeFile)
        self.builder.connect_signals(self)
        window = self.builder.get_object("main_Window")
        window.connect("delete-event", gtk.main_quit)
        window.show()
        updateButton = self.builder.get_object("updateButton")
        updateButton.connect("pressed", self.startUpdate)
        self.checkUpdate()

    def startUpdate(self, widget):
        try:
            os.system("echo 'y' | pkexec pacman -S system-update pearos-settings filesystem system-overview theme-switcher-bin neofetch")
        except Exception as e:
            print("internal application error")
            print (e)
        self.checkUpdate()

    def checkUpdate(self):
        updateLabel = self.builder.get_object("idLabel")
        updateName = self.builder.get_object("idUpdate")
        try:
            updates = subprocess.check_output("echo 'n' | pkexec pacman -Syu 2> /dev/null | grep 'system-update\|pearos-livecd-desktop\|pearos-settings\|filesystem\|system-overview\|theme-switcher\|neofetch'", shell=True)
            if updates != "":
                os.system("mkdir -p /tmp/system-update/ && wget -O /tmp/system-update/update.ini 192.168.1.2/update-info/update.ini")
                updateLabel.set_markup("<b>Updates are available for your Pear</b>")
                config = configparser.ConfigParser()
                config.sections()
                config.read('/tmp/system-update/update.ini')
                config.sections()
                nice = config['pext-header']['UpdateName']
                updateName.set_markup(nice)
            else:
                noup = subprocess.check_output("""echo -e "<b>Your Pear is up to date - pearOS NiceC0re</b>" | tr -d '\n' """, shell=True)
                noup = str(noup, 'utf-8')
                distro = subprocess.check_output("""cat /etc/os-release | egrep 'VARIANT' | cut -d = -f 2 | tr -d '\n"' """, shell=True)
                distro = str(distro, 'utf-8')
                label = " ".join((noup, distro))
                updateLabel.set_markup(label)
                updateButton = self.builder.get_object("updateButton")
                lblAgreement = self.builder.get_object("lblAgreement")
                updateButton.hide()
                lblAgreement.set_text("")

                config = configparser.ConfigParser()
                config.sections()
                config.read('/tmp/system-update/update.ini')
                config.sections()
                nice = subprocess.check_output("""date '+ Last checked: %A, %B %d, %Y at %H:%M'""", shell=True)
                nice = str(nice, 'utf-8')
                updateName.set_markup(nice)

        except:
            noup = subprocess.check_output("""echo -e "<b>Your Pear is up to date - pearOS NiceC0re" | tr -d '\n' """, shell=True)
            noup = str(noup, 'utf-8')
            distro = subprocess.check_output("""cat /etc/os-release | egrep 'VARIANT' | cut -d = -f 2 | tr -d '\n"' && echo -e "</b>" | tr -d '\n'""", shell=True)
            distro = str(distro, 'utf-8')
            label = " ".join((noup, distro))
            updateLabel.set_markup(label)
            updateButton = self.builder.get_object("updateButton")
            lblAgreement = self.builder.get_object("lblAgreement")
            updateButton.hide()
            lblAgreement.set_text("")

            config = configparser.ConfigParser()
            config.sections()
            config.read('/tmp/system-update/update.ini')
            config.sections()
            nice = subprocess.check_output("""date '+ Last checked: %A, %B %d, %Y at %H:%M'""", shell=True)
            nice = str(nice, 'utf-8')
            updateName.set_markup(nice)
if __name__ == '__main__':
    main = Main()
    gtk.main()

