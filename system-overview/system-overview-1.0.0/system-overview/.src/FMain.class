' Gambas class file

'/*
'Copyright 2021 Alexandru Balan (alex@pearos.xyz)
'Artwork Copyright 2020 Andrei Muntean (andreymuntean2004@gmail.com)
' Permission Is Hereby granted, free of charge, To any person obtaining a Copy of this software And associated documentation files(the "Software"), To deal In the Software without restriction, including without limitation the rights To Use , Copy , modify, merge, publish, distribute, sublicense, And / Or sell copies Of the Software, And To permit persons To whom the Software Is Furnished To Do so, subject To the following conditions:
' The above copyright notice And this permission notice shall be included In all copies Or substantial portions Of the Software.
'THE SOFTWARE Is PROVIDED "AS IS", WITHOUT WARRANTY Of ANY KIND, EXPRESS Or IMPLIED, INCLUDING BUT Not LIMITED To THE WARRANTIES Of MERCHANTABILITY, FITNESS For A PARTICULAR PURPOSE And NONINFRINGEMENT.IN NO Event SHALL THE AUTHORS Or COPYRIGHT HOLDERS BE LIABLE For ANY CLAIM, DAMAGES Or OTHER LIABILITY, WHETHER In AN ACTION Of CONTRACT, TORT Or OTHERWISE, ARISING From , OUT Of Or In CONNECTION With THE SOFTWARE Or THE Use Or OTHER DEALINGS In THE SOFTWARE.
'*/

Public CurrentTheme As String
Public cpuinfo As String
Public raminfo As String
Public model As String
Public vendor As String
Public current_disk As String
Public gCard As String
Public gCard1 As String
Public gCard2 As String
Public sn As String
Public resolution_val As String
Public inches_val As String
Public storage_total As String
Public pear_version As String


Public Sub Form_Open()
  
'Shell "sysinfo --release | tr -d '\n'" To lbl_name.Text
'Shell "sysinfo --stage | tr -d '\n'" To lbl_release.Text
Shell "cat /etc/os-release | egrep \"PRETTY_NAME\" | cut -d = -f 2 | tr -d '\"' | tac | tr '\n' ' '" To lbl_name.Text
Shell "cat /etc/os-release | egrep \"VARIANT\" | cut -d = -f 2 | tr -d '\"' | tac | tr '\n' ' '" To lbl_release.Text
brand.Picture = Picture["/usr/share/pixmaps/nicec0re-logo.png"]

Dim pcent As String

Shell "cat /proc/cpuinfo | grep -i ghz | uniq | cut -f2 -d" & ":" To cpuinfo              'getting the CPU details and putting them into cpuinfo string variable
lbl_cpu.Text = "Processor  " & cpuinfo                                                    'setting the lbl_cpu.Text(from FMain) as "Processor" and printing the variable there

Exec ["cat", "/proc/meminfo"] To raminfo                                                  'getting the RAM memory
Try raminfo = Scan(raminfo, "*MemTotal:*\n*")[1]                                          'advanced text "filtering, with failsafe. If it fails, the error below this is raised
  If Error Then                                                                           'in case of error, then
    raminfo = ""                                                                          'set the ram as empty
  Else                                                                                    'if isn't error, then
    While Not IsDigit(Right(raminfo))                                                     'wile the ram is NOT a number,
      raminfo = Left(raminfo, -1)                                                         'get all characters from a string, exluding the last character: Left(foobar, -1) will be 'fooba', for example
    Wend                                                                                  'ending WHILE loop
    raminfo = Trim(raminfo)                                                               'trimming the output
  Endif                                                                                   'ending the IF statement
   If raminfo Then                                                                        'this is always true
    Try raminfo = Format(CInt(raminfo) / 1024 / 1024, "#,###.00 GB")                      'changing format of the output string
    lbl_ram.Text = "Memory  " & raminfo                                                   'finally, setting the lbl_ram.Text from FMain as Memory and the memory is outputed
  Endif                                                                                   'ending the IF

Dim i As Integer                                                                          'making i variable as Integer
Dim c As String                                                                           'c variable as string
Dim band As Boolean = False                                                               'band as boolean, which is set to false by default
Shell "lspci | grep -i vga" Wait To gCard                                                 'calling a bash command to show us our GPU
  
  For i = 1 To Len(gCard)                                                                 'a function that tests if you have more than one GPU
    c = Mid(gCard, i, 1)                                                                  '
    If Comp(c, "\n") = 0 Then                                                             '
      band = True                                                                         'if you have 1 GPU, band boolean will be set to true
    Endif                                                                                 'ending IF statement

    If band = False Then                                                                  'if you have more than 1 GPU, then
      gCard1 &= c                                                                         'the gCard1 will have a value
    Else                                                                                  'if not, 
      gCard2 &= c                                                                         'gCalrd2 will have a value
    Endif                                                                                 'closing IF
  Next                                                                                    'ending For loop
  
  gCard1 = Mid(gCard1, InStr(gCard1, ":", 5) + 2)                                         '1st gpu will have the value of a trimmed outpu
  gCard2 = Mid(gCard2, InStr(gCard2, ":", 5) + 2)                                         'same for the second
  
 lbl_graphics.Text = Left$(gCard1, InStr(gCard1, "(") - 1)                                'setting the lbl_graphics.Text in FMain
 lbl_graphics.Text = "Graphics " & Left$(gCard1, InStr(gCard1, "(") - 1)                  'same, if you have more than 1 gpu

 lbl_gpu_name.Text = lbl_graphics.Text                                                    'displaying the GPU name in the Displays tab :)
 
Shell "xdpyinfo | awk '/dimensions/{print $2}' | tr -d '\n'" To lbl_resolution.Text       'getting the current display resolution and sending it into the lbl_resolution Text value
lbl_resolution.Text = "(" & lbl_resolution.Text & ")"                                     'adding paranthesis to the lbl_resolution
Print resolution_val                                                                      'printing for debugging purposes


Shell "python3 /usr/share/extras/inches.py  | tr -d '[' | tr -d ']' | tr -d '\n'" To lbl_inch.Text    'running a python sript that gets the inches of the display
lbl_inch.Text = lbl_inch.Text & "''"                                                      'adding the Inches sign, as the output is 13, the correction will make it 13''

Shell "df | grep '^/dev/' | awk '{s+=$2} END {print s/1048576}'" To storage_total                 'saving the total storage in the variable
Shell "lsblk -no pkname $(findmnt -n / | awk '{ print $2 }') | tr --delete '\n'" To current_disk  'taking the current boot disk and removing the new line generated by the output
Shell "cat /sys/block/" & current_disk & "/device/model" To model                                 'getting model of hdd/sdd using bash
Shell "cat /sys/block/" & current_disk & "/device/vendor" To vendor                               'getting vendor of hdd/sdd using bash
lbl_startup_disk.text = "Startup Disk  " & vendor & " " & model                                   'combining model and vendor into one line, using it as Startup Disk in the FMain
Shell "cat /sys/block/" & current_disk & "/device/serial" To sn                                   'getting hdd/ssd selial number
lbl_serial_number.Text = "Serial Number  " & sn                                                   'displaying the serial number
Shell "x=$(df | grep '^/dev/' | awk '{s+=$2} END {print  s/1048576}'); echo ${x%.*} | tr -d '\n'" To lbl_storage_total.Text   'displaying the total storage of the main drive
  lbl_storage_total.Text = lbl_storage_total.Text & " GB"                                                                     'correcting the display value
  Shell "df -h --output=avail / | sed '1d' | tr -d ' ' | tr -d '\n' | tr -d 'G'" To lbl_storage_available.Text                'displaying the available storage
  lbl_storage_available.Text = lbl_storage_available.Text & " GB available of " & lbl_storage_total.Text & " "                'correcting the avail. storage
  
  Shell "df -h --output=pcent / | sed '1d' | tr -d ' ' | tr -d '\n' | tr -d '%'" To pcent         'storring the % used storage in pcent variable for later use
  storage_bar.Value = Val(pcent) / 100                                                            'setting the storage bar, and using Val() to convert from string to integer
Print current_disk                                                                                'small print for debugging purposes
End                                                                                               'ending the Form_Open() function

Public Sub btn_discord_Click()                                                                    'when the user clicks on Discord button
  Shell "xdg-open 'https://discord.gg/FYGBBgJ3Xx'"                                                'it will open the default browser with the shown link
End                                                                                               'ending Discord click event

Public Sub btn_ask_Click()                                                                        'when the user clicks on ASK button
  Shell "xdg-open 'https://forum.pearos.xyz'"                                                     'it will open the def. browser with the shown link
End                                                                                               'ending ASK click event

Public Sub btn_display_prefs_Click()                                                              'when the user clicks on the 'Display Preferences...' button
  Shell "systemsettings5 kcm_kscreen"                                                             'the programm will open the Display Setting in the KDE
End                                                                                               'ending the "Display Preferences..." event

Public Sub btn_update_Click()
  Shell "update-mgr"
End

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''The code part is pretty much done.The above lines are For the front-end , buttons design, And borders :p''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub btn_overview_Click()
  Me.W = 588
  Me.H = 301
  btn_overview.Border = True
  btn_displays.Border = False
  btn_storage.Border = False
  btn_support.Border = False
  btn_service.Border = False
  
  pn_overview.Visible = True
  pn_displays.Visible = False 
  pn_storage.Visible = False
  pn_support.Visible = False
  pn_service.Visible = False
End

Public Sub btn_displays_Click()
  Me.W = 581
  Me.H = 350
  btn_overview.Border = False
  btn_displays.Border = True 
  btn_storage.Border = False
  btn_support.Border = False
  btn_service.Border = False
  
  pn_overview.Visible = False
  pn_displays.Visible = True
  pn_storage.Visible = False
  pn_support.Visible = False
  pn_service.Visible = False
End

Public Sub btn_storage_Click()
  Me.W = pn_storage.W
  Me.H = pn_storage.H + 5
  btn_overview.Border = False
  btn_displays.Border = False
  btn_storage.Border = True
  btn_support.Border = False
  btn_service.Border = False

  pn_overview.Visible = False
  pn_displays.Visible = False
  pn_storage.Visible = True
  pn_support.Visible = False
  pn_service.Visible = False
End

Public Sub btn_support_Click()
  Me.W = pn_support.W
  Me.H = pn_support.H + 40
  btn_overview.Border = False
  btn_displays.Border = False
  btn_storage.Border = False
  btn_support.Border = True
  btn_service.Border = False
  
  pn_overview.Visible = False
  pn_displays.Visible = False
  pn_storage.Visible = False
  pn_support.Visible = True
  pn_service.Visible = False
End

Public Sub btn_service_Click()
  Me.W = pn_service.W
  Me.H = pn_service.H + 30
  btn_overview.Border = False
  btn_displays.Border = False
  btn_storage.Border = False
  btn_support.Border = False
  btn_service.Border = True
  
  pn_overview.Visible = False
  pn_displays.Visible = False
  pn_storage.Visible = False
  pn_support.Visible = False
  pn_service.Visible = True
End
